import { 
  parseSMILES, 
  writeSDF, 
  computeLogP, 
  checkLipinskiRuleOfFive,
  getExactMass,
  getHeavyAtomCount,
  getMolecularFormula
} from 'index';
import type { SDFRecord } from 'src/generators/sdf-writer';

const drugMolecules = [
  { smiles: 'CC(C)CC1=CC=C(C=C1)C(C)C(=O)O', name: 'Ibuprofen', mw: 206.28 },
  { smiles: 'CC(=O)OC1=CC=CC=C1C(=O)O', name: 'Aspirin', mw: 180.16 },
  { smiles: 'CN1C=NC2=C1C(=O)N(C(=O)N2C)C', name: 'Caffeine', mw: 194.19 },
  { smiles: 'CC(C)NCC(COC1=CC=CC=C1)O', name: 'Propranolol', mw: 259.34 },
];

console.log('Parsing SMILES and creating SDF...\n');

const records: SDFRecord[] = [];

for (const drug of drugMolecules) {
  const result = parseSMILES(drug.smiles);

  if (result.errors.length > 0) {
    console.error(`Error parsing ${drug.name}:`, result.errors);
    continue;
  }

  const molecule = result.molecules[0];
  if (!molecule) {
    console.error(`No molecule parsed for ${drug.name}`);
    continue;
  }

   const exactMass = getExactMass(molecule);
   const heavyAtomCount = getHeavyAtomCount(molecule);
   const formula = getMolecularFormula(molecule);
   const logP = computeLogP(molecule);
   const lipinski = checkLipinskiRuleOfFive(molecule);

   records.push({
     molecule,
     properties: {
       NAME: drug.name,
       SMILES: drug.smiles,
       MW: drug.mw.toString(),
       ATOMS: molecule.atoms.length.toString(),
       BONDS: molecule.bonds.length.toString(),
        FORMAL_CHARGE: '0',
        HEAVY_ATOM_FRACTION: (heavyAtomCount / molecule.atoms.length).toFixed(2),
        ELEMENT_COUNTS: formula,
       LOGP: logP.toFixed(3),
       LIPINSKI_PASSES: lipinski.passes.toString(),
       LIPINSKI_VIOLATIONS: lipinski.violations.join('; ') || 'None',
     },
   });

    console.log(`✓ Parsed ${drug.name}: ${molecule.atoms.length} atoms, ${molecule.bonds.length} bonds`);
    console.log(`  Heavy atom fraction: ${(heavyAtomCount / molecule.atoms.length * 100).toFixed(1)}%`);
    console.log(`  Exact mass: ${exactMass.toFixed(3)}`);
    console.log(`  LogP: ${logP.toFixed(3)}`);
    console.log(`  Lipinski: ${lipinski.passes ? 'PASS' : 'FAIL'} (${lipinski.violations.length} violations)`);
}

console.log('\nGenerating SDF file...\n');

const sdfResult = writeSDF(records, {
  title: 'Common Drug Molecules',
  programName: 'opencode',
  comment: 'Generated by opencode example script',
});

if (sdfResult.errors.length > 0) {
  console.error('Errors during SDF generation:', sdfResult.errors);
} else {
  console.log('✓ Successfully generated SDF file');
  console.log(`  Records: ${records.length}`);
  console.log(`  Size: ${sdfResult.sdf.length} bytes`);
}

console.log('\n--- SDF Output Preview (first 500 chars) ---\n');
console.log(sdfResult.sdf.substring(0, 500) + '...\n');

console.log('--- Full SDF Output ---\n');
console.log(sdfResult.sdf);
